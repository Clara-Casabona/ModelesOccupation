library(unmarked)
library(AICcmodavg)
library(ggplot2)
# Chargez le jeu de données
borchi <- read.csv("borchi.csv", header = TRUE)
# Vérifiez votre répertoire de travail avec getwd(), et changez-le avec setwd() au besoin.
# Explorez les données
str(borchi)
summary(borchi)
##################
# Explication du likelihood
probDet <-seq(from=0, to=1, by=0.01)
LL = dbinom(x = 2, size = 3, prob = probDet)
plot(LL~probDet, type = "l",
ylab = "Likelihood",
xlab = "Probabilité de détection",
main = "Probabilité de détection d'une mésange à tête brune (3 visites, 2 detections)"
)
MLE = probDet[which(LL==max(LL))]
abline(v = MLE, col="red", lwd=3, lty=2)
##############################################
##############  Défi likelihood ##############
##############################################
#  1. Formater les données
### 1.1 Standardisation des variables
conifer_mean <- mean(borchi$conif)
conifer_sd <- sd(borchi$conif)
conifer_std <- as.data.frame((borchi$conif - conifer_mean)/conifer_sd)
names(conifer_std)[1] = paste("conifer_std")
temp =  borchi[, c(5:7)]
temp_mean <- mean(as.vector(as.matrix(temp)))
temp_sd <- sd(as.vector(as.matrix(temp)))
temp_std <- (temp - temp_mean)/temp_sd
jj = borchi[, c(8:10)]
jj_mean <- mean(as.vector(as.matrix(jj)))
jj_sd <- sd(as.vector(as.matrix(jj)))
jj_std <- (jj - jj_mean)/jj_sd
### 1.2 Vérification des correlations entre variables
mapply(cor,as.data.frame(temp_std), as.data.frame(jj_std))
### 1.3 Formater les données avec la fonction unmarkedFrameOccu() du package unmarked
borchi_data <- unmarkedFrameOccu(y = borchi[, c(1:3)],
siteCovs =   conifer_std,
obsCovs = list(temp_std =temp_std,
jj_std=jj_std))
### 1.4 Explorer l'objet
detHist(borchi_data)
summary(borchi_data)
# 2.1 Création des modèles
mod_null  <- occu( ~ 1 ~ 1,     data = borchi_data)
mod_occ   <- occu( ~ 1 ~ conifer_std, data = borchi_data)
mod_det   <- occu( ~ temp_std + jj_std  ~ 1, data = borchi_data)
mod_complet   <- occu(  ~ temp_std + jj_std ~ conifer_std, data = borchi_data)
# 2.2 Inspecter les modèles
summary(mod_null)
summary(mod_occ)
summary(mod_det)
summary(mod_complet)
# 3. Test d'ajustement
### Attention! Cette étape peut prendre quelques minutes à rouler (ou heures si le jeu de données et le nombre de simulations sont très grands)
gof <- mb.gof.test(mod_complet, nsim = 10, plot.hist = TRUE) # 10 simulations c'est pas assez! Mais si vous faites rouler cette ligne avec juste 10 cela va prendre seulement quelques secondes
gof
save(gof, file = "mod_complet_gof.Rdata")
gof$chisq.tab
# 4. Sélection des modèles
Modeles <- list(mod_null, mod_occ, mod_det, mod_complet)
Names   <- c("mod_null","mod_occ","mod_det","mod_complet")
aictab(cand.set = Modeles, modnames = Names, c.hat = 1.11)
# 5. Inférence multimodèle
modavgShrink(cand.set = Modeles, modnames = Names,
c.hat = 1.11, parm = "conifer_std",
parm.type = "psi")
###########################################################
########### 5. Inférence multimodèle  -  Défi #############
###########################################################
# 6. Prédictions
### 6.1 Crée un nouveau jeu de données et  ajouter les valeurs standardisées pour faire les estimations
new_dats <- data.frame(temp =
seq(from = min(temp),
to = max(temp),
length.out = 30),
jj_std = 0)
new_dats$temp_std <- (new_dats$temp - temp_mean)/temp_sd
###  6.2 Calculer les prédictions avec modavgPred()
preds <- modavgPred(cand.set = Modeles, modnames = Names,
c.hat = 1.11, newdata = new_dats,
type = "response", parm.type = "detect")
new_dats$mod_avg_pred <- preds$mod.avg.pred
new_dats$uncond_se <- preds$uncond.se
new_dats$low95 <- preds$lower.CL
new_dats$upp95 <- preds$upper.CL
### 6.3 Résumer les résultats dans un graphique
ggplot(new_dats, aes(temp)) +
geom_line(aes(y=mod_avg_pred), colour="blue") +
ylim(0,1) +
geom_ribbon(aes(ymin=low95, ymax=upp95), alpha=0.2) +
labs(y =expression("Probabilité de détection" (p)),
x = expression(paste("Température de l'air (",
degree, "C)"))) +
theme_bw()
###########################################################
#### Predictions - Pourcentage de conifères - Défi ########
###########################################################
